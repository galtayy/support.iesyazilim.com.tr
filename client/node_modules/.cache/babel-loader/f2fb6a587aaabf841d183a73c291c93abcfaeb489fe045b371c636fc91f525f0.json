{"ast":null,"code":"var _jsxFileName = \"/Users/gurkanaltay/Desktop/projects/support.iesyazilim.com.tr/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\nimport { toast } from 'react-toastify';\nimport authService from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Logout function\n  const logout = () => {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n\n    // Update state\n    setUser(null);\n    setIsAuthenticated(false);\n\n    // Navigate to login page\n    navigate('/login');\n  };\n\n  // Initialize auth state\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          // Check if token is expired\n          const decodedToken = jwt_decode(token);\n          const currentTime = Date.now() / 1000;\n          if (decodedToken.exp < currentTime) {\n            // Token expired\n            logout();\n            return;\n          }\n\n          // Token is valid, get user info\n          const response = await authService.getCurrentUser();\n          setUser(response.data);\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n    initAuth();\n  }, [navigate]);\n\n  // Change password function\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      setLoading(true);\n      await authService.changePassword(currentPassword, newPassword);\n\n      // Show success message\n      toast.success('Şifreniz başarıyla değiştirildi.');\n      return true;\n    } catch (error) {\n      console.error('Change password error:', error);\n\n      // Show error message\n      let errorMessage = 'Şifre değiştirilirken bir hata oluştu.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n      }\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = updatedUser => {\n    setUser(prevUser => ({\n      ...prevUser,\n      ...updatedUser\n    }));\n  };\n\n  // Context value\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    changePassword,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"DZ43dVOC6ATcOj/spkf7xa39n3k=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useNavigate","jwt_decode","toast","authService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","navigate","logout","localStorage","removeItem","initAuth","token","getItem","decodedToken","currentTime","Date","now","exp","response","getCurrentUser","data","error","console","changePassword","currentPassword","newPassword","success","errorMessage","updateProfile","updatedUser","prevUser","value","login","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gurkanaltay/Desktop/projects/support.iesyazilim.com.tr/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\nimport { toast } from 'react-toastify';\nimport authService from '../services/authService';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Logout function\n  const logout = () => {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n    \n    // Update state\n    setUser(null);\n    setIsAuthenticated(false);\n    \n    // Navigate to login page\n    navigate('/login');\n  };\n\n  // Initialize auth state\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        \n        if (token) {\n          // Check if token is expired\n          const decodedToken = jwt_decode(token);\n          const currentTime = Date.now() / 1000;\n          \n          if (decodedToken.exp < currentTime) {\n            // Token expired\n            logout();\n            return;\n          }\n          \n          // Token is valid, get user info\n          const response = await authService.getCurrentUser();\n          setUser(response.data);\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initAuth();\n  }, [navigate]);\n\n  // Change password function\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      setLoading(true);\n      await authService.changePassword(currentPassword, newPassword);\n      \n      // Show success message\n      toast.success('Şifreniz başarıyla değiştirildi.');\n      \n      return true;\n    } catch (error) {\n      console.error('Change password error:', error);\n      \n      // Show error message\n      let errorMessage = 'Şifre değiştirilirken bir hata oluştu.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n      }\n      toast.error(errorMessage);\n      \n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = (updatedUser) => {\n    setUser(prevUser => ({\n      ...prevUser,\n      ...updatedUser\n    }));\n  };\n\n  // Context value\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    changePassword,\n    updateProfile\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}